/* 
  cookie，session, token 这三种是如何管理会话的。
  ----------------------------------------------
  cookie：是一段不超过4KB的小型文本数据，很多浏览器都限制一个站点最多保存20个cookie。
          由名(name)/值(value)对形式存储和其它几个，
          控制cookie有效期、安全性、使用范围的可选属性组成，跟服务器没啥关系，
          仅仅是浏览器实现的一种数据存储功能。
  cookie由服务器生成，发送给浏览器，浏览器把cookie以KV形式存储到某个目录下的文本文件中。

  cookie认证流程：
                  HTTP Request
                  --------------------------------------------------->
                  首先，客户端会发送一个http请求到服务器端               

                  HTTP Response + Set-Cookie
                  <---------------------------------------------------
    客户端        服务器端接受客户端请求后，发送一个http响应到客户端，            服务器端
                  这个响应头，其中就包含Set-Cookie头部。

                  HTTP Request + Cookie
                  --------------------------------------------------->
                  在客户端发起的第二次请求时带上我们的标识

                  HTTP Response
                  <--------------------------------------------------------
=============================================================================================
  session：从字面上讲，就是会话。
           这个就类似你和一个人交谈，你怎么知道当时和你交谈的是张三而不是李四呢?
           对方肯定有某种特征（长相等）表明他是张三；
           session也是类似的道理，服务器要知道当前请求是谁发给自己的。
           为了做这种区分，服务器就是要给每个客户端分配不同的"身份标识"，
           然后客户端每次向服务器发请求的时候，都带上这个"身份标识"，服务器就知道这个请求来自与谁了。
           -----------------------------------------------------------------------------------
           至于客户端怎么保存这个"身份标识"，可以有很多方式，对于浏览器客户端，大家都采用cookie的方式。
  
  session认证流程：
              1.用户向服务器发送用户名和密码
              2.服务器验证通过后,在当前对话(session)里面保存相关数据,比如用户角色, 登陆时间等;
              3.服务器向用户返回一个session_id, 写入用户的cookie
              4.用户随后的每一次请求, 都会通过cookie, 将session_id传回服务器
              5.服务端收到 session_id, 找到前期保存的数据, 由此得知用户的身份

  session的缺点：单机当然没问题，如果是服务器集群，或者是跨域的服务导向架构，
                 这就要求session数据共享，每台服务器都能够读取session。
                 ------------------------------------------------------------------------------
  举例来说：A网站和B网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，
           再访问另一个网站就会自动登录，请问怎么实现？这个问题就是如何实现单点登录的问题

    1.Session复制：任何一个服务器上的Session发生改变（增删改）
                  该节点会把这个Session的所有内容序列化，然后广播给所有其它节点。
    2.共享Session：将SessionId 集中存储到一个地方，所有的机器都来访问这个地方的数据。
                  这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。
    3.另一种方案是服务器索性不保存session数据了，所有数据就保存在客户端，每次请求都发回服务器。
      这种方案就是接下来要介绍的基于Token的验证。
==================================================================================================
  token：也称作令牌，由uid+time+sign[+固定参数]组成。是一种服务端无状态的认证方式, 所谓无状态就是服务端并不会保存身份认证相关的数据。
         uid: 用户唯一身份标识
         time: 当前时间的时间戳
         sign: 签名, 使用 hash/encrypt 压缩成定长的十六进制字符串，以防止第三方恶意拼接
         固定参数(可选): 将一些常用的固定参数加入到 token 中是为了避免重复查库

  token在客户端一般存放于cookie，localStorage或sessionStorage中，在服务器一般存于数据库中。

  token认证流程：
            1.用户登录，成功后服务器返回Token给客户端。
            2.客户端收到数据后保存在客户端
            3.客户端再次访问服务器，将token放入headers中
            4.服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码
====================================================================================================
  Cookie和Session的区别：
            1.存储位置不同：cookie数据存放在客户的浏览器上，session数据放在服务器上
            2.隐私策略不同：cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗，考虑到安全应当使用session
            3.session会在一定时间内保存在服务器上。当访问增多，就会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用cookie
            4.存储大小不同： 单个cookie保存的数据不能超过4k，很多浏览器都限制一个站点最多保存20个cookie。
            一般建议： 将登陆信息等重要信息存放为session, 其他信息如果需要保留，可以放在cookie中
  ----------------------
  Token和Session的区别：
            1.Session是一种HTTP储存机制，为无状态的HTTP提供持久机制;
            2.Token就是令牌，比如你授权(登录)一个程序时，它就是个依据，判断你是否已经授权该软件。
              Session和Token并不矛盾，作为身份认证Token安全性比Session好，
              如上所说，如果你需要实现有状态的回话，仍然可以增加Session来在服务端保存一些状态。

  https://segmentfault.com/a/1190000019457890
*/