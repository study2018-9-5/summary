/* 
  1.在Javascript中什么是执行上下文?
    每次在浏览器（或Node）中运行Javascript时，引擎都会执行一系列步骤。
    其中一个步骤涉及/创建执行上下文/。
    执行上下文有且只有三类：全局执行上下文，函数上下文，与eval上下文；由于eval一般不会使用，这里不做讨论。
      1.全局执行上下文：只有一个，在客户端中一般由浏览器创建，也就是我们熟知的window对象，我们能通过this直接访问到它。
      2.函数执行上下文：可存在无数个，每当一个函数被调用时都会创建一个函数上下文；
        需要注意的是，同一个函数被多次调用，都会创建一个新的上下文。

  2.执行上下文栈(下文简称执行栈)也叫调用栈，执行栈用于存储代码执行期间创建的所有上下文，
    具有LIFO（Last In First Out后进先出，也就是先进后出）的特性。
    JS代码首次运行，都会先创建一个全局执行上下文并压入到执行栈中，之后每当有函数被调用，
    都会创建一个新的函数执行上下文并压入栈内；由于执行栈LIFO的特性，所以可以理解为，
    JS代码执行完毕前在执行栈底部永远有个全局执行上下文。

*/

// function f1(){
//   console.log("log_1")
// }
// f1()

// function f1(){
//   console.log("log_2")
// }
// f1()


var f1 = function (){
  console.log("log_1")
}
f1()

var f1 = function (){
  console.log("log_2")
}
f1()